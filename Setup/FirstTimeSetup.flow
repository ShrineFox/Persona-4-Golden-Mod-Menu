import("FirstTimeSetup.msg");

void MenuOptions()
{
	//Toggle options until done
	bool done = false;
	int pageNum = 0;
	int mask = 0;
	while (!done)
	{
		//Set message variables
		for (int i = 0; i < 8; i++)
		{
			SET_MSG_VAR(i, 619 + BIT_CHK(6321 + i), 6);
		}
		SET_MSG_VAR(8, 619 + BIT_CHK(6334), 6); // Default to direct commands
		SET_MSG_VAR(9, 619 + BIT_CHK(6341), 6);
		SET_MSG_VAR(10, 619 + BIT_CHK(6342), 6);

		SEL_CHK_PAD(14, 18);
		SEL_CHK_PAD(15, 18);

		if (!pageNum)
		{
			mask = 6113;
			SEL_CHK_PAD(10, 11);
			SEL_CHK_PAD(11, 11);
			SEL_CHK_PAD(5, 11);
			SEL_CHK_PAD(7, 11);
		}
		else
		{
			mask = 3135;
			SEL_CHK_PAD(10, 12);
			SEL_CHK_PAD(11, 12);
			SEL_CHK_PAD(5, 12);
			SEL_CHK_PAD(7, 12);
		}

		//Toggle selection or read more about it
		int selection = ADV_SEL(SquareMenuOptions_Text + pageNum, SquareMenuOptions, mask);
		if (selection < 11)
		{
			if (selection > 8) // Scheduler mods have a different range of flags (6340+)
				ToggleOption(ModMenu_About, 6332, selection, false);
			else
				ToggleOption(ModMenu_About, 6321, selection, false);
		}
		else if (selection == 11 || selection == 12)
		{
			pageNum = !pageNum;
		}
		else
		{
			done = true;
			if (!BIT_CHK(6321))
			{
				OPEN_MSG_WIN();
				MSG(OptionsWarning);
				CLOSE_MSG_WIN();
			}
		}
	}
}

bool ToggleOption(int startMsg, int startFlag, int selection, bool subOption)
{
	OPEN_MSG_WIN();
	MSG(startMsg + selection);
	SEL_CHK_PAD(14, 2);
	int sel = SEL(ToggleMenu);
	switch (sel)
	{
	case 0: //on
		if (selection == 8)
			BIT_ON(6334);
		else
			BIT_ON(startFlag + selection);
		if (selection == 3 && !subOption)
		{
			CLOSE_MSG_WIN();
			DungeonOptionsToggle();
		}
		else if (selection == 4)
		{
			CLOSE_MSG_WIN();
			FindAFriendOptionsToggle();
		}
		else if (selection == 9)
		{
			CLOSE_MSG_WIN();
			RemoveEventsOptionsToggle();
		}
		break;
	case 1: //off
		if (selection == 8)
			BIT_OFF(6334);
		else
			BIT_OFF(startFlag + selection);
		if (selection == 3 && !subOption)
		{
			BIT_OFF(6330);
			BIT_OFF(6331);
			BIT_OFF(6332);
			BIT_OFF(6333);
		}
		else if (selection == 9)
		{
			BIT_OFF(6350);
			BIT_OFF(6351);
			BIT_OFF(6352);
			BIT_OFF(6353);
		}
		break;
	case 2: //back
		break;
	}
	CLOSE_MSG_WIN();
	return sel;
}

void FindAFriendOptionsToggle()
{
	//Toggle options until done
	bool done = false;
	while (!done)
	{
		//Set message variables for menu options
		SET_MSG_VAR(0, 619 + BIT_CHK(5678), 6);
		SET_MSG_VAR(1, 619 + BIT_CHK(6340), 6);
		SEL_CHK_PAD(14, 2);
		SEL_CHK_PAD(15, 2);
		//Toggle selection or read more about it
		int selection = ADV_SEL(FindAFriendOptions_Text, FindAFriendOptions, 0);
		if (selection == 0)
		{
			OPEN_MSG_WIN();
			MSG(SPOILER_TOGGLE);
			SEL_CHK_PAD(14, 2);
			int sel = SEL(ToggleMenu);
			if (sel == 0)
				BIT_ON(5678);
			else if (sel == 1)
				BIT_OFF(5678);
			CLOSE_MSG_WIN();
		}
		else if (selection == 1)
		{
			OPEN_MSG_WIN();
			MSG(RemoveInvitations_About);
			SEL_CHK_PAD(14, 2);
			int sel = SEL(ToggleMenu);
			if (sel == 0)
				BIT_ON(6340);
			else if (sel == 1)
				BIT_OFF(6340);
			CLOSE_MSG_WIN();
		}
		else
		{
			done = true;
		}
	}
}

void DungeonOptionsToggle()
{
	//Toggle options until done
	bool done = false;
	while (!done)
	{
		//Set message variables for menu options
		for (int i = 0; i < 4; i++)
		{
			SET_MSG_VAR(i, 619 + BIT_CHK(6330 + i), 6);
		}
		SEL_CHK_PAD(14, 4);
		SEL_CHK_PAD(15, 4);
		//Toggle selection or read more about it
		int selection = ADV_SEL(DungeonOptions_Text, DungeonOptions, 0);
		if (selection != 4)
		{
			bool optionSel = ToggleOption(ShowFox_About, 6330, selection, true);
			// If show fox was selected
			if (selection == 0)
			{
				// Reset fox uses goho-m flag if call fox was turned off
				if (optionSel == 1)
				{
					BIT_OFF(6360);
				}
				else if (optionSel == 0)
				{
					bool done2 = false;
					while (!done2)
					{
						// If call fox was turned on show selection for whether calling the fox should us a goho-m
						SET_MSG_VAR(0, 620 - BIT_CHK(6360), 6);
						SEL_CHK_PAD(14, 1);
						SEL_CHK_PAD(15, 1);
						OPEN_MSG_WIN();
						int foxSel = ADV_SEL(ShowFoxOptions_Text, ShowFoxOptions, 0);
						// Toggle the option
						if (foxSel == 0)
						{
							SET_MSG_VAR(2, 790, 1);
							SET_MSG_VAR(3, 2099, 1);
							OPEN_MSG_WIN();
							MSG(ShowFox_GohoM);
							SEL_CHK_PAD(14, 2);
							SEL_CHK_PAD(15, 2);
							int gohomSel = SEL(ToggleMenu);
							//
							if (gohomSel == 0)
							{
								BIT_OFF(6360);
							}
							else if (gohomSel == 1)
							{
								BIT_ON(6360);
							}
						} else {
							done2 = true;
						}
						CLOSE_MSG_WIN();
					}
				}
			}
		}
		else
		{
			done = true;
		}
	}
}

void RemoveEventsOptionsToggle()
{
	//Toggle options until done
	bool done = false;
	while (!done)
	{
		//Set message variables for menu options
		for (int i = 0; i < 4; i++)
		{
			SET_MSG_VAR(i, 619 + BIT_CHK(6350 + i), 6);
		}
		SEL_CHK_PAD(14, 4);
		SEL_CHK_PAD(15, 4);
		//Toggle selection or read more about it
		int selection = ADV_SEL(RemoveEventsOptions_Text, RemoveEventsOptions, 0);
		if (selection != 4)
		{
			ToggleOption(RemoveCamping_About, 6350, selection, true);
		}
		else
		{
			done = true;
		}
	}