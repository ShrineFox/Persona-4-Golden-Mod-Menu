import("FirstTimeSetup.msg");

void FirstTimeSetup()
{
	//Introduction
	OPEN_MSG_WIN();
	HELP_MSG(SquareMenuConfig);
	CLOSE_MSG_WIN();

	//Marks first time setup as complete
	BIT_ON(6320);

	//Set all menu option values to 0
	for (int i = 0; i < 8; i++)
	{
		BIT_OFF(6321 + i);
	}

	// Set second group of menu options to 0
	for (int i = 0; i < 3; i++)
	{
		BIT_OFF(6340 + i);
	}

	//Enable "Options" in menu for later configuration
	BIT_ON(6329);

	//Set all dungeon option values to 0
	for (int i = 0; i < 4; i++)
	{
		BIT_OFF(6330 + i);
	}

	//Toggle options until done
	MenuOptions();
}

void MenuOptions()
{
	//First time setup for Custom Square Menu
	if (!BIT_CHK(6320))
	{
		FirstTimeSetup();
	}
	else
	{
		//Toggle options until done
		bool done = false;
		int pageNum = 0;
		int mask = 0;
		while (!done)
		{
			//Set message variables
			for (int i = 0; i < 8; i++)
			{
				SET_MSG_VAR(i, 619 + BIT_CHK(6321 + i), 6);
			}
			SET_MSG_VAR(8, 619 + BIT_CHK(6334), 6); // Default to direct commands
			// Set message variables for scheduler mods
			for (int i = 0; i < 3; i++)
			{
				SET_MSG_VAR(i + 9, 619 + BIT_CHK(6340 + i), 6);
			}

			SEL_CHK_PAD(14, 18);
			SEL_CHK_PAD(15, 18);

			if (!pageNum)
			{
				mask = 6080;
				SEL_CHK_PAD(10, 11);
				SEL_CHK_PAD(11, 11);
				SEL_CHK_PAD(5, 11);
				SEL_CHK_PAD(7, 11);
			}
			else
			{
				mask = 2111;
				SEL_CHK_PAD(10, 12);
				SEL_CHK_PAD(11, 12);
				SEL_CHK_PAD(5, 12);
				SEL_CHK_PAD(7, 12);
			}

			//Toggle selection or read more about it
			int selection = ADV_SEL(SquareMenuOptions_Text + pageNum, SquareMenuOptions, mask);
			if (selection < 11)
			{
				if (selection > 8) // Scheduler mods have a different range of flags (6340+)
					ToggleOption(ModMenu_About, 6332, selection, false);
				else
					ToggleOption(ModMenu_About, 6321, selection, false);
			}
			else if (selection == 11 || selection == 12)
			{
				pageNum = !pageNum;
			}
			else
			{
				done = true;
				if (!BIT_CHK(6321))
				{
					OPEN_MSG_WIN();
					MSG(OptionsWarning);
					CLOSE_MSG_WIN();
				}
			}
		}
	}
}

void ToggleOption(int startMsg, int startFlag, int selection, bool subOption)
{
	OPEN_MSG_WIN();
	MSG(startMsg + selection);
	SEL_CHK_PAD(14, 2);
	int sel = SEL(ToggleMenu);
	switch (sel)
	{
	case 0: //on
		if (selection == 8)
			BIT_ON(6334);
		else
			BIT_ON(startFlag + selection);
		if (selection == 3 && !subOption)
		{
			CLOSE_MSG_WIN();
			DungeonOptionsToggle();
		}
		else if (selection == 4)
		{
			MSG(SPOILER_TOGGLE);
			sel = SEL(ToggleMenu);
			if (sel == 0)
				BIT_ON(5678);
			else if (sel == 1)
				BIT_OFF(5678);
			MSG(RemoveInvitations_About);
			sel = SEL(ToggleMenu);
			if (sel == 0)
				BIT_ON(6340);
			else if (sel == 1)
				BIT_OFF(6340);
		}
		else if (selection == 9)
		{
			CLOSE_MSG_WIN();
			RemoveEventsOptionsToggle();
		}
		break;
	case 1: //off
		if (selection == 8)
			BIT_OFF(6334);
		else
			BIT_OFF(startFlag + selection);
		if (selection == 3 && !subOption)
		{
			BIT_OFF(6330);
			BIT_OFF(6331);
			BIT_OFF(6332);
			BIT_OFF(6333);
		}
		else if (selection == 9)
		{
			BIT_OFF(6350);
			BIT_OFF(6351);
			BIT_OFF(6352);
			BIT_OFF(6353);
		}
		break;
	case 2: //back
		break;
	}
	CLOSE_MSG_WIN();
}

void DungeonOptionsToggle()
{
	//Toggle options until done
	bool done = false;
	while (!done)
	{
		//Set message variables for menu options
		for (int i = 0; i < 4; i++)
		{
			SET_MSG_VAR(i, 619 + BIT_CHK(6330 + i), 6);
		}
		SEL_CHK_PAD(14, 4);
		SEL_CHK_PAD(15, 4);
		//Toggle selection or read more about it
		int selection = ADV_SEL(DungeonOptions_Text, DungeonOptions, 0);
		if (selection != 4)
		{
			ToggleOption(ShowFox_About, 6330, selection, true);
		}
		else
		{
			done = true;
		}
	}
}

void RemoveEventsOptionsToggle()
{
	//Toggle options until done
	bool done = false;
	while (!done)
	{
		//Set message variables for menu options
		for (int i = 0; i < 4; i++)
		{
			SET_MSG_VAR(i, 619 + BIT_CHK(6350 + i), 6);
		}
		SEL_CHK_PAD(14, 4);
		SEL_CHK_PAD(15, 4);
		//Toggle selection or read more about it
		int selection = ADV_SEL(RemoveEventsOptions_Text, RemoveEventsOptions, 0);
		if (selection != 4)
		{
			ToggleOption(RemoveCamping_About, 6350, selection, true);
		}
		else
		{
			done = true;
		}
	}
}

bool IntroSkip()
{
	OPEN_MSG_WIN();
	//HELP_MSG( IntroSkipConfig );
	//CLOSE_MSG_WIN();
	//OPEN_MSG_WIN();
	MSG(IntroSkipSelection);
	int selection = SEL(YesNo);
	CLOSE_MSG_WIN();
	if (selection == 0)
		selection = 1;
	else
		selection = 0;
	return selection;
}